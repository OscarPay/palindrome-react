{"version":3,"sources":["components/MainContainer.jsx","components/ValidatorContainer.jsx","components/PalindromeInput.jsx","App.js","serviceWorker.js","index.js"],"names":["MainContainer","children","className","ValidatorContainer","PalindromeInput","useState","isPalindrome","setIsPalindrome","hasWrite","setHasWrite","type","onChange","event","formatOriginal","target","value","toLowerCase","replace","Boolean","reversed","split","reverse","join","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAQeA,G,WANO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAClB,6BAASC,UAAU,kBACdD,KCIME,EANY,SAAC,GAAD,IAAEF,EAAF,EAAEA,SAAF,OACvB,6BAASC,UAAU,uBACdD,I,OCsBMG,EAxBS,WAAO,IAAD,EAEcC,oBAAS,GAFvB,mBAEnBC,EAFmB,KAELC,EAFK,OAGMF,oBAAS,GAHf,mBAGnBG,EAHmB,KAGTC,EAHS,KAa1B,OACI,yBAAKP,UAAU,cACX,2BAAOA,UAAU,oBAAoBQ,KAAK,OAAOC,SAVpC,SAAAC,GACjB,IACMC,EADWD,EAAME,OAAOC,MACEC,cAAcC,QAAQ,KAAM,IAC5DR,EAAYS,QAAQL,IACpB,IAAMM,EAAWN,EAAeO,MAAM,IAAIC,UAAUC,KAAK,IACzDf,EAAgBM,IAAmBM,MAO3BX,IACMF,EAAgB,uBAAGJ,UAAU,qBAAb,4BAAsD,uBAAGA,UAAU,uBAAb,8BCE7EqB,MAhBf,WACE,OACE,yBAAKrB,UAAU,OAEb,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,oDAEA,kBAAC,EAAD,UCFUgB,QACW,cAA7BM,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e7e26f3.chunk.js","sourcesContent":["import React from 'react';\n\nconst MainContainer = ({children}) => (\n    <section className=\"main-container\">\n        {children}\n    </section>\n);\n\nexport default MainContainer","import React from 'react';\n\nconst ValidatorContainer = ({children}) => (\n    <section className=\"validator-container\">\n        {children}\n    </section>\n);\n\nexport default ValidatorContainer","import React, {useState} from 'react';\n\nconst PalindromeInput = () => {\n\n    const [isPalindrome, setIsPalindrome] = useState(false)\n    const [hasWrite, setHasWrite] = useState(false)\n\n    const handleChange = event => {\n        const original = event.target.value;\n        const formatOriginal = original.toLowerCase().replace(/ /g, '');\n        setHasWrite(Boolean(formatOriginal))\n        const reversed = formatOriginal.split('').reverse().join('');\n        setIsPalindrome(formatOriginal === reversed)\n    };\n\n    return (\n        <div className=\"palindrome\">\n            <input className=\"palindrome__input\" type=\"text\" onChange={handleChange}/>\n            {\n                hasWrite &&\n                    ((isPalindrome) ? <p className=\"palindrome__valid\">Yes, it is! ðŸ˜ƒ</p> : <p className=\"palindrome__invalid\">No, is not ðŸ˜•</p>)\n            }\n        </div>\n    )\n};\n\nexport default PalindromeInput","import React from 'react';\nimport './App.css';\nimport MainContainer from './components/MainContainer';\nimport ValidatorContainer from './components/ValidatorContainer';\nimport PalindromeInput from './components/PalindromeInput';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <MainContainer>\n        <ValidatorContainer>\n          <h1>Palindrome Validator</h1>\n\n          <PalindromeInput/>\n        </ValidatorContainer>\n      </MainContainer>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}